<?php

/**
 * @file
 * Contains quicklink.module.
 */

/**
 * Implements hook_menu().
 */
function quicklink_menu() {
  $items['admin/config/development/performance/default'] = array(
    'title' => 'Performance',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => backdrop_get_path('module', 'system'),
    'weight' => -10,
  );
  $items['admin/config/development/performance/quicklink'] = array(
    'title' => 'Quicklink',
    'description' => 'Pass configuration to the Quicklink library to prefetch links.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('quicklink_settings'),
    'access arguments' => array('administer quicklink'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'quicklink.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function quicklink_permission() {
  return array(
    'administer quicklink' => array(
      'title' => t('Administer Quicklink'),
      'description' => t('Configure quicklink settings.'),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function quicklink_config_info() {
  $prefixes['quicklink.settings'] = array(
    'label' => t('Quicklink Settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_library_info().
 */
function quicklink_library_info() {
  $libraries = array();

  $libraries['quicklink'] = array(
    'title' => 'Quicklink',
    'version' => '1.0.0',
    'js' => array(
      'https://unpkg.com/quicklink@1.0.0/dist/quicklink.umd.js' => array(
        'minified' => TRUE,
        'type' => 'external',
        'weight' => -20
      ),
    ),
  );

  $libraries['quicklink_init'] = array(
    'title' => 'Quicklink init',
    'version' => '1.0.0',
    'js' => array(
      backdrop_get_path('module', 'quicklink') . '/js/quicklink_init.js' => array('weight' => -10),
    ),
    'css' => array(
      backdrop_get_path('module', 'quicklink') . '/css/quicklink-debug.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  $libraries['quicklink_polyfill'] = array(
    'title' => 'Polyfill',
    'version' => '2',
    'js' => array(
      'https://polyfill.io/v2/polyfill.min.js?features=IntersectionObserver' => array(
        'minified' => TRUE,
        'type' => 'external',
        'weight' => -100
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_preprocess_layout().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function quicklink_preprocess_layout(&$variables) {
  // Load current configuration.
  $config = config('quicklink.settings');
  $selector = $config->get('selector');

  // Get debug variable.
  $debug = $config->get('enable_debug_mode');
  $debug_log = array();

  // Load the library unless we disable later.
  $load_library = TRUE;

  // Always ignore the logout link.
  $url_patterns_to_ignore = array('user/logout');
  $debug_log[] = 'Quicklink will ignore "user/logout" URL pattern.';

  $allowed_domains = array();

  // Populate and remove line returns from URL patterns to ignore.
  foreach (explode(PHP_EOL, $config->get('url_patterns_to_ignore')) as $value) {
    $pattern = str_replace("\r", '', $value);

    if (!empty($pattern)) {
      $url_patterns_to_ignore[] = $pattern;
    }
  }

  // Populate and remove line returns from allowed domains.
  foreach (explode(PHP_EOL, $config->get('allowed_domains')) as $value) {
    $domain = str_replace("\r", '', $value);

    if (!empty($domain)) {
      $allowed_domains[] = $domain;
    }
  }

  // Populate and remove line returns from "Prefetch these paths only".
  foreach (explode(PHP_EOL, $config->get('prefetch_only_paths')) as $value) {
    $path = str_replace("\r", '', $value);

    if (!empty($path)) {
      $prefetch_only_paths[] = $path;
    }
  }

  // Check for "Ignore Hashes" option.
  if ($config->get('ignore_hashes') == 1) {
    $url_patterns_to_ignore[] = '#';
    $debug_log[] = 'Quicklink will ignore URLs with hashes(#).';
  }

  // If "Ignore admin paths" is selected, ignore the admin paths.
  if ($config->get('ignore_admin_paths') == 1) {
    $url_patterns_to_ignore[] = '/admin';
    $url_patterns_to_ignore[] = '/edit';
    $debug_log[] = 'Quicklink will ignore admin URL patterns.';
  }

  $node = menu_get_object();
  if ($node instanceof Node) {
    $node_type = $node->type;
    $no_load_content_types = $config->get('no_load_content_types');

    if (array_key_exists($node_type, $no_load_content_types) && $no_load_content_types[$node_type] !== 0) {
      $load_library = FALSE;
      $debug_log[] = 'Library not loaded because content type "' . $node_type . '" is specified to not load library.';
    }
  }

  // If user is logged in AND "Prefetch for anonymous users only" is selected,
  // do not load library.
  if ($variables['logged_in'] && $config->get('no_load_when_authenticated') == 1) {
    $load_library = FALSE;
    $debug_log[] = 'Library not loaded because user is authenticated.';
  }

  // Disable the library when a session is started.
  if ($config->get('no_load_when_session')) {
    if (!empty($_SESSION)) {
      $load_library = FALSE;
      $debug_log[] = 'Library not loaded because PHP session is started.';
    }
  }

  backdrop_add_library('quicklink', 'quicklink_init');
  $quicklink_settings['ignore_admin_paths'] = $config->get('ignore_admin_paths');
  $quicklink_settings['ignore_ajax_links'] = $config->get('ignore_ajax_links');
  $quicklink_settings['ignore_file_ext'] = $config->get('ignore_file_ext');
  $quicklink_settings['debug'] = $debug;

  if (!empty($url_patterns_to_ignore[0])) {
    $quicklink_settings['url_patterns_to_ignore'] = $url_patterns_to_ignore;
    $debug_log['url_patterns_to_ignore'][] = $url_patterns_to_ignore;
  }

  if (!empty($selector)) {
    $quicklink_settings['selector'] = $selector;
    $debug_log[] = 'Selector for Quicklink to parse: ' . $selector;
  }

  if (!empty($allowed_domains[0])) {
    $quicklink_settings['allowed_domains'] = $allowed_domains;
    $debug_log['allowed_domains'][] = $allowed_domains;
  }

  if (!empty($prefetch_only_paths[0])) {
    $quicklink_settings['prefetch_only_paths'] = $prefetch_only_paths;
    $debug_log['prefetch_only_paths'][] = $prefetch_only_paths;
  }

  if ($load_library) {
    if ($config->get('load_polyfill') == 1) {
      backdrop_add_library('quicklink', 'quicklink_polyfill');
      $debug_log[] = 'Intersection Observer polyfill library loaded';
    }

    backdrop_add_library('quicklink', 'quicklink');
  }

  if ($debug) {
    $quicklink_settings['debug'] = 1;
    backdrop_add_library('quicklink', 'quicklink_debug');
    $quicklink_settings['debug_log'] = $debug_log;
  }
  backdrop_add_js(array('quicklink' => $quicklink_settings), 'setting');
}
